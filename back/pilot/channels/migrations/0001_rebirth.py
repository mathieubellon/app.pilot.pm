# Generated by Django 2.1.7 on 2019-02-14 10:24

from django.conf import settings
import django.contrib.postgres.indexes
import django.contrib.postgres.search
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
import pilot.utils.search


class Migration(migrations.Migration):

    replaces = [('channels', '0001_initial'), ('channels', '0002_channel_owners'), ('channels', '0003_auto_20151110_1019'), ('channels', '0004_remove_channel_owner'), ('channels', '0005_auto_20151110_1031'), ('channels', '0006_auto_20160315_0703'), ('channels', '0007_auto_20160330_1427'), ('channels', '0008_auto_20170602_1002'), ('channels', '0009_init_channel_types'), ('channels', '0010_auto_20170602_1007'), ('channels', '0011_migrate_type_in_reversion'), ('channels', '0012_auto_20170623_1517'), ('channels', '0013_auto_20170627_1531'), ('channels', '0014_auto_20170629_1209'), ('channels', '0015_init_channel_type_fields'), ('channels', '0016_migrate_empty_channel_type_in_reversion'), ('channels', '0017_auto_20171127_1047'), ('channels', '0018_auto_20180423_1430'), ('channels', '0019_auto_20180424_1741'), ('channels', '0020_remove_channel_slug'), ('channels', '0021_init_search_fields'), ('channels', '0022_init_search_indicies'), ('channels', '0023_auto_20181204_1411'), ('channels', '0024_migrate_channel_type'), ('channels', '0025_auto_20181204_1450'), ('channels', '0026_channel_hidden')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('labels', '0001_rebirth'),
        ('desks', '0001_rebirth'),
    ]

    operations = [
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(blank=True, verbose_name='Mis à jour à')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Créé le')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('partial_search_document', models.TextField(blank=True)),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='Nom')),
                ('hierarchy', models.CharField(editable=False, max_length=512, verbose_name='Hierarchie')),
                ('description', models.TextField(blank=True, max_length=3000)),
                ('state', models.CharField(choices=[('active', 'Actif'), ('closed', 'Fermé')], db_index=True, default='active', max_length=30, verbose_name='Etat')),
                ('hidden', models.BooleanField(default=False, verbose_name='Invisible')),
                ('closed_at', models.DateTimeField(blank=True, null=True, verbose_name='Fermé le')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='channel_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('desk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='channels', to='desks.Desk', verbose_name='Desk')),
                ('owners', models.ManyToManyField(blank=True, related_name='channels_owned', to=settings.AUTH_USER_MODEL, verbose_name='Responsable')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subchannels', to='channels.Channel', verbose_name='Parent channel')),
                ('publishers', models.ManyToManyField(blank=True, related_name='publishers', to=settings.AUTH_USER_MODEL, verbose_name='Publieurs')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='channels_by_type', to='labels.Label', verbose_name='Type')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='channel_updated', to=settings.AUTH_USER_MODEL, verbose_name='Mis à jour par')),
            ],
            options={
                'verbose_name': 'Canal',
                'verbose_name_plural': 'Canaux',
                'ordering': ['hierarchy'],
            },
        ),
        migrations.CreateModel(
            name='ChannelToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='Pour renouveler le token vous devez le supprimer et en créer un autre', max_length=40, verbose_name='Token')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('channel', models.OneToOneField(limit_choices_to={'type__publication_target': ''}, on_delete=django.db.models.deletion.CASCADE, to='channels.Channel', verbose_name='Canal')),
            ],
            options={
                'verbose_name': 'Channel Token',
                'verbose_name_plural': 'Channel Tokens',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='FacebookCredential',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facebook_account', models.CharField(max_length=100)),
                ('facebook_type', models.PositiveSmallIntegerField(choices=[(0, 'Timeline utilisateur'), (1, 'Page')], default=0)),
                ('access_token', models.CharField(max_length=512)),
                ('facebook_id', models.CharField(blank=True, max_length=255, null=True)),
                ('facebook_page_name', models.CharField(blank=True, max_length=255, null=True)),
                ('facebook_page_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('facebook_page_token', models.CharField(blank=True, max_length=512, null=True)),
                ('validity', models.BooleanField(default=False)),
                ('page_publishing_permission', models.BooleanField(default=False)),
                ('last_time_checked', models.DateTimeField(blank=True, null=True)),
                ('channel', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='channels.Channel', verbose_name='Canal')),
            ],
        ),
        migrations.CreateModel(
            name='TwitterCredential',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('twitter_account', models.CharField(max_length=100)),
                ('access_token_key', models.CharField(max_length=255)),
                ('access_token_secret', models.CharField(max_length=255)),
                ('validity', models.BooleanField(default=False)),
                ('last_time_checked', models.DateTimeField(blank=True, null=True)),
                ('channel', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='channels.Channel', verbose_name='Canal')),
            ],
        ),
        migrations.AddIndex(
            model_name='channel',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='channels_ch_search__c28aef_gin'),
        ),
        migrations.AddIndex(
            model_name='channel',
            index=pilot.utils.search.TrigramIndex(fields=['partial_search_document'], name='channels_ch_partial_3e2a91_gin'),
        ),
    ]
