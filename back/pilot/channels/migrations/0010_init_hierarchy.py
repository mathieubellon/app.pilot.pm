# Generated by Django 2.2.14 on 2020-10-05 12:04
from django.db import migrations
from django.http import QueryDict

from pilot.utils import noop


# def node_to_hierarchy(node):
#     return [
#         {
#             'type': 'folder',
#             'name': child['name'],
#             'nodes': node_to_hierarchy(child)
#         }
#         for child in sorted(node['nodes'], key=lambda n: n['name'])
#     ] + [
#         {
#             'type': 'item',
#             'id': item_id
#         }
#         # Item ids were already sorted by their title in the initial queryset, no need to sort them again
#         for item_id in node['items']
#     ]


def init_hierarchy(apps, schema_editor):
    Channel = apps.get_model('channels', 'Channel')
    # SavedFilter = apps.get_model('itemsfilters', 'SavedFilter')

    # saved_filters = list(SavedFilter.objects.filter(query__icontains='channels='))

    # channel_id -> channel
    all_nodes = {}
    # tree_id -> {'root_channel': channel, 'root_node': node, nodes: [node, node...]}
    trees = {}
    for channel in Channel.objects.filter(hidden=False).iterator():
        item_ids = list(
            channel.items
            .filter(hidden=False, in_trash=False)
            .order_by('json_content__title')
            .values_list('id', flat=True)
        )

        channel.hierarchy = [
            {
                'type': 'item',
                'id': item_id
            }
            # Item ids were already sorted by their title in the initial queryset, no need to sort them again
            for item_id in item_ids
        ]

        channel.save()

    #     node = {
    #         'id': channel.id,
    #         'name': channel.name,
    #         'parent_id': channel.parent_id,
    #         'is_root': not channel.parent_id,
    #         'items': item_ids,
    #         'nodes': []
    #     }
    #
    #     if channel.tree_id not in trees:
    #         trees[channel.tree_id] = {
    #             'root_channel': None,
    #             'root_node': None,
    #             'nodes': []
    #         }
    #
    #     trees[channel.tree_id]['nodes'].append(node)
    #     all_nodes[channel.id] = node
    #
    #     # Store the root channel
    #     if not channel.parent_id:
    #         trees[channel.tree_id]['root_channel'] = channel
    #         trees[channel.tree_id]['root_node'] = node
    #
    # # Transform the old subchannels in hierarchy folders
    # for tree in trees.values():
    #     root_channel = tree['root_channel']
    #     root_node = tree['root_node']
    #
    #     # Short circuit if the parent has been hidden/deleted
    #     if not root_node:
    #         continue
    #
    #     for node in tree['nodes']:
    #         if not node['is_root']:
    #             all_nodes[node['parent_id']]['nodes'].append(node)
    #
    #             for item_id in node['items']:
    #                 root_channel.items.add(item_id)
    #
    #             # Replace channel filters in SavedFilters
    #             old_channel_filter = f'channels={node["id"]}'
    #             for saved_filter in saved_filters:
    #                 if old_channel_filter in saved_filter.query:
    #                     # QueryDict expect an encoded query string, not an unicode string
    #                     encoding = 'utf-8'
    #                     query_dict = QueryDict(saved_filter.query.encode(encoding), encoding=encoding, mutable=True)
    #                     filter_channels_ids = query_dict.getlist('channels')
    #                     new_channels = [(root_node["id"] if cid==str(node["id"]) else cid) for cid in filter_channels_ids]
    #                     query_dict.setlist('channels', new_channels)
    #                     saved_filter.query = query_dict.urlencode()
    #
    #     Channel.objects.filter(id=root_node['id']).update(
    #         hierarchy=node_to_hierarchy(root_node)
    #     )
    #
    # SavedFilter.objects.bulk_update(saved_filters, ['query'])


class Migration(migrations.Migration):

    dependencies = [
        ('channels', '0009_auto_20201005_1357'),
    ]

    operations = [
        migrations.RunPython(init_hierarchy, noop),
    ]
