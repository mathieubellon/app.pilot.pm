# Generated by Django 2.1.7 on 2020-02-27 13:19
from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations

from pilot.utils import noop


class NotificationType:
    COPY_PROJECT = 'copy_project'
    EXPORT_DESK = 'export_desk'
    EXPORT_XLS = 'export_xls'
    FEED_SAVED_FILTER = 'feed_saved_filter'
    INTERNAL_SHARED_FILTER = 'internal_shared_filter'
    MENTION_COMMENT = 'mention_comment'
    MENTION_ANNOTATION = 'mention_annotation'
    REMINDER = 'reminder'
    TASK_ASSIGNED = 'task_assigned'
    TASK_TODO = 'task_todo'
    TASK_DELETED = 'task_deleted'
    VALIDATION_SHARING = 'validation_sharing'
    VALIDATION_IDEA = 'validation_idea'


class ContentTypes:
    Project = 16
    Item = 19
    EditSession = 21
    SavedFilter = 23
    Task = 101


def migrate_notification_types(apps, schema_editor):
    Notification = apps.get_model("notifications", "Notification")
    Item = apps.get_model("items", "Item")

    i = 0
    for notification in Notification.objects.iterator():
        content_type_id = notification.linked_object_content_type_id
        type = None

        ###
        # Deduce the notification type from the various data of the notification
        ###
        if 'annotation_uuid' in notification.data:
            type = NotificationType.MENTION_ANNOTATION

        elif 'comment_id' in notification.data:
            type = NotificationType.MENTION_COMMENT

        elif 'saved_filter_action' in notification.data:
            type = NotificationType.FEED_SAVED_FILTER

        elif 'reminder_id' in notification.data:
            type = NotificationType.REMINDER

        elif 'title' in notification.data:
            type = NotificationType.EXPORT_XLS

        elif not content_type_id:
            type = NotificationType.EXPORT_DESK

        elif content_type_id == ContentTypes.SavedFilter:
            type = NotificationType.INTERNAL_SHARED_FILTER

        elif content_type_id == ContentTypes.Item:
            type = NotificationType.VALIDATION_SHARING

        elif content_type_id == ContentTypes.Project:
            if 'Votre proposition' in notification.content or 'Your suggestion' in notification.content:
                type = NotificationType.VALIDATION_IDEA
            else:
                type = NotificationType.COPY_PROJECT

        elif content_type_id == ContentTypes.Task:
            if 'vous a assigné une tâche' in notification.content or 'assigned you a task' in notification.content:
                type = NotificationType.TASK_ASSIGNED
            elif 'terminer une tâche' in notification.content or 'completed a task' in notification.content:
                type = NotificationType.TASK_TODO
            elif 'supprimé une tâche' in notification.content or 'deleted a task' in notification.content:
                type = NotificationType.TASK_DELETED


        ###
        # Update all notifications that were linked to an EditSession, to link the item instead
        ###
        if content_type_id == ContentTypes.EditSession:
            try:
                item = Item.objects.get(sessions__id=notification.linked_object_id)
                notification.linked_object_content_type_id = ContentTypes.Item
                notification.linked_object_id = item.id
                i+=1
            except ObjectDoesNotExist:
                pass

        notification.type = type
        notification.save()

    print(f"success for {i}")


class Migration(migrations.Migration):

    dependencies = [
        ('notifications', '0009_notification_type'),
    ]

    operations = [
        migrations.RunPython(migrate_notification_types, reverse_code=noop),
    ]
