# Generated by Django 2.1.7 on 2019-07-29 08:45
from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations

from pilot.utils import noop

PROJECT_CONTENT_TYPE_ID = 16
ITEM_CONTENT_TYPE_ID = 19
ITEM_SNAPSHOT_CONTENT_TYPE_ID = 21



def migrate_comments(apps, schema_editor):
    try:
        OldComment = apps.get_model("django_comments", "Comment")
    except LookupError: # Will happen on brand new databases
        return
    NewComment = apps.get_model("comments", "Comment")
    ItemSnapshot = apps.get_model("items", "ItemSnapshot")
    Item = apps.get_model("items", "Item")
    Project = apps.get_model("projects", "Project")
    Activity = apps.get_model("activity_stream", "Activity")
    Notification = apps.get_model("notifications", "Notification")
    ContentType = apps.get_model('contenttypes', 'ContentType')

    old_comment_content_type_id = ContentType.objects.get_or_create(
        app_label="django_comments",
        model="comment"
    )[0].id
    new_comment_content_type_id = ContentType.objects.get_or_create(
        app_label="comments",
        model="comment"
    )[0].id

    NewComment.objects.all().delete()

    items_desks = {}
    projects_desks = {}
    for item in Item.objects.only('id', 'desk_id').all().iterator():
        items_desks[int(item.id)] = item.desk_id
    for project in Project.objects.only('id', 'desk_id').all().iterator():
        projects_desks[int(project.id)] = project.desk_id

    i = 0
    for comment in OldComment.objects.all().order_by('id').iterator():
        old_comment_id = comment.id
        data = {}
        content_type_id = comment.content_type_id
        object_id = int(comment.object_pk)
        desk_id = None

        if content_type_id == PROJECT_CONTENT_TYPE_ID:
            try:
                desk_id = projects_desks[object_id]
            except KeyError:
                continue

        if content_type_id == ITEM_CONTENT_TYPE_ID:
            try:
                desk_id = items_desks[object_id]
            except KeyError:
                continue

        if content_type_id == ITEM_SNAPSHOT_CONTENT_TYPE_ID:
            try:
                snapshot = ItemSnapshot.objects.only(
                    'item_id', 'major_version', 'minor_version'
                ).get(id=object_id)
            except ObjectDoesNotExist:
                continue

            desk_id = items_desks[snapshot.item_id]
            content_type_id = ITEM_CONTENT_TYPE_ID
            object_id = int(snapshot.item_id)
            data['version'] = "V{}.{}".format(snapshot.major_version, snapshot.minor_version)

        new_comment = NewComment.objects.create(
            desk_id=desk_id,
            content_type_id=content_type_id,
            object_id=object_id,
            user_id=comment.user_id,
            user_email=comment.user_email,
            comment=comment.comment,
            submit_date=comment.submit_date,
            data=data,
        )

        Activity.objects.filter(
            verb='commented',
            action_object_content_type_id=old_comment_content_type_id,
            action_object_object_id=str(comment.id)
        ).update(
            action_object_content_type_id=new_comment_content_type_id,
            action_object_object_id=str(new_comment.id)
        )

        for notification in Notification.objects.filter(data__comment_id=old_comment_id):
            notification.data['comment_id'] = new_comment.id
            notification.save()

        i+=1
        if i%1000 == 0:
            print(f"{i} done...")


class Migration(migrations.Migration):

    dependencies = [
        ('comments', '0001_initial'),
        ('activity_stream', '0002_auto_20190729_1559'),
        ('items', '0008_auto_20190606_1232')
    ]

    operations = [
        migrations.RunPython(migrate_comments, reverse_code=noop),
    ]
