# Generated by Django 2.1.7 on 2019-02-14 10:16

from django.conf import settings
import django.contrib.auth.models
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.contrib.postgres.operations import TrigramExtension, UnaccentExtension, BtreeGinExtension
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import pilot.pilot_users.models
import re

from pilot.utils.search import CreateSearchDictionary


class Migration(migrations.Migration):

    replaces = [('pilot_users', '0001_initial'), ('pilot_users', '0002_auto_20160318_1410'), ('pilot_users', '0003_pilotuser_personal_config'), ('pilot_users', '0004_auto_20171106_1740'), ('pilot_users', '0005_pilotuser_config_calendar'), ('pilot_users', '0006_create_invitation_token'), ('pilot_users', '0007_move_invitations_model'), ('pilot_users', '0008_auto_20180424_1741'), ('pilot_users', '0009_migrate_config_dashboard'), ('pilot_users', '0010_auto_20180516_0935'), ('pilot_users', '0011_auto_20180607_1535'), ('pilot_users', '0012_auto_20180607_1548'), ('pilot_users', '0013_migrate_user_permissions'), ('pilot_users', '0014_auto_20180608_1427'), ('pilot_users', '0015_migrate_deactivated_users'), ('pilot_users', '0016_remove_pilotuser_is_active'), ('pilot_users', '0017_pilotuser_cgv_acceptance_date'), ('pilot_users', '0018_auto_20180614_0938'), ('pilot_users', '0019_migrate_user_config'), ('pilot_users', '0020_auto_20180614_0939'), ('pilot_users', '0021_auto_20180614_1314'), ('pilot_users', '0022_migrate_language_and_init_menu'), ('pilot_users', '0023_auto_20181012_1201'), ('pilot_users', '0024_init_user_notification_preferences'), ('pilot_users', '0025_remove_pilotuser_mention_by_email'), ('pilot_users', '0026_auto_20181106_1143'), ('pilot_users', '0027_auto_20190115_1206'), ('pilot_users', '0028_auto_20190115_1438')]

    initial = True

    dependencies = [
        ('desks', '0001_rebirth'),
        ('organizations', '0001_rebirth'),
    ]

    operations = [
        # Here is the absolute first migration, because every other models depends on User.
        # We init the extensions
        BtreeGinExtension(),
        TrigramExtension(),
        UnaccentExtension(),
        CreateSearchDictionary(),

        migrations.CreateModel(
            name='PilotUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(max_length=80, verbose_name='Prénom')),
                ('last_name', models.CharField(max_length=80, verbose_name='Nom')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Adresse email')),
                ('username', models.CharField(db_index=True, help_text='160 caractères maximum. Lettres, nombre et "_" .', max_length=160, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[\\w_]+$'), 'Le nom ne peut contenir que des lettres, chiffres et "_"', 'invalid')], verbose_name="Nom d'utilisateur")),
                ('language', models.CharField(choices=[('fr', 'Français'), ('en', 'English')], default='fr', max_length=2, verbose_name="Langue de l'interface")),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars', verbose_name='Avatar')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text="Indique si l'utilisateur peut se connecter à l'interface d'administration", verbose_name='Fait partie du staff')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date d'inscription")),
                ('cgv_acceptance_date', models.DateTimeField(blank=True, help_text="Date/heure de clic sur la checkbox d'acceptation des CGV", null=True, verbose_name='Acceptation CGV')),
                ('login_menu', models.CharField(choices=[('dashboard', 'Tableau de bord'), ('items', 'Contenus'), ('projects', 'Projets'), ('calendar', 'Calendrier')], default='projects', max_length=100, verbose_name='Menu de connexion')),
                ('notification_preferences', django.contrib.postgres.fields.jsonb.JSONField(default=pilot.pilot_users.models.get_default_notification_preferences, verbose_name='Notification preferences')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Téléphone')),
                ('localization', models.CharField(blank=True, max_length=254, verbose_name='Localisation')),
                ('job', models.CharField(blank=True, max_length=254, verbose_name='Métier')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='InvitationToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(blank=True, verbose_name='Mis à jour à')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Créé le')),
                ('email', models.EmailField(max_length=254, verbose_name='E-mail')),
                ('permission', models.CharField(choices=[('Administrators', 'Administrateur'), ('Editors', 'Éditeur'), ('Restricted Editors', 'Éditeur restreint')], default='Restricted Editors', max_length=36, verbose_name='Permission')),
                ('token', models.CharField(max_length=255, verbose_name='Token')),
                ('used_at', models.DateTimeField(blank=True, null=True, verbose_name='Utilisé le')),
                ('used', models.BooleanField(default=False, verbose_name='Utilisé')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitationtoken_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('desk', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='invitation_tokens', to='desks.Desk', verbose_name='Desk')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitation_tokens', to='organizations.Organization', verbose_name='Organisation')),
            ],
            options={
                'verbose_name': 'Invitation token',
                'verbose_name_plural': 'Invitation tokens',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(blank=True, verbose_name='Mis à jour à')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Créé le')),
                ('name', models.CharField(db_index=True, help_text='160 caractères maximum. Lettres, nombre et "_" .', max_length=160, validators=[django.core.validators.RegexValidator(re.compile('^[\\w_]+$'), 'Le nom ne peut contenir que des lettres, chiffres et "_"', 'invalid')], verbose_name="Nom d'équipe")),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('desk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='desks.Desk', verbose_name='Desk')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team_updated', to=settings.AUTH_USER_MODEL, verbose_name='Mis à jour par')),
            ],
            options={
                'verbose_name': 'Equipe',
                'verbose_name_plural': 'Equipes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserInDesk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', models.CharField(choices=[('Administrators', 'Administrateur'), ('Editors', 'Éditeur'), ('Restricted Editors', 'Éditeur restreint')], max_length=100, verbose_name='Permission')),
                ('config_dashboard', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict)),
                ('config_calendar', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict)),
                ('desk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_in_desk_set', to='desks.Desk')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_in_desk_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'desks_desk_users',
            },
        ),
        migrations.CreateModel(
            name='UserInDeskDeactivated',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', models.CharField(choices=[('Administrators', 'Administrateur'), ('Editors', 'Éditeur'), ('Restricted Editors', 'Éditeur restreint')], max_length=100, verbose_name='Permission')),
                ('config_dashboard', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict)),
                ('config_calendar', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict)),
                ('desk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_in_desk_deactivated_set', to='desks.Desk')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_in_desk_deactivated_set', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserInOrganization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_organization_admin', models.BooleanField(default=False, help_text="Indique si l'utilisateur peut accéder à l'écran de gestion de facturation de l'organisation", verbose_name="Administre l'organisation")),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_in_organization_set', to='organizations.Organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_in_organization_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'organizations_organization_users',
            },
        ),
        migrations.AddField(
            model_name='invitationtoken',
            name='teams',
            field=models.ManyToManyField(blank=True, to='pilot_users.Team', verbose_name='Equipes'),
        ),
        migrations.AddField(
            model_name='invitationtoken',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='invitationtoken_updated', to=settings.AUTH_USER_MODEL, verbose_name='Mis à jour par'),
        ),
        migrations.AddField(
            model_name='invitationtoken',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur'),
        ),
        migrations.AddField(
            model_name='pilotuser',
            name='desks',
            field=models.ManyToManyField(related_name='users', through='pilot_users.UserInDesk', to='desks.Desk', verbose_name='Desks'),
        ),
        migrations.AddField(
            model_name='pilotuser',
            name='desks_deactivated',
            field=models.ManyToManyField(related_name='users_deactivated', through='pilot_users.UserInDeskDeactivated', to='desks.Desk', verbose_name='Desks'),
        ),
        migrations.AddField(
            model_name='pilotuser',
            name='organizations',
            field=models.ManyToManyField(related_name='users', through='pilot_users.UserInOrganization', to='organizations.Organization', verbose_name='Organizations'),
        ),
        migrations.AddField(
            model_name='pilotuser',
            name='teams',
            field=models.ManyToManyField(related_name='users', to='pilot_users.Team', verbose_name='Equipes'),
        ),
        migrations.AlterUniqueTogether(
            name='team',
            unique_together={('desk', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='invitationtoken',
            unique_together={('organization', 'token')},
        ),
    ]
